(defun put (obj name p)(setf (get obj name) p))
(defun apped (obj name val)
	(put obj name (cons val (get obj name)))
)
(defun inc (obj name)
	(put obj name (+ 1 (get obj name)))
)
(defun loadEdge (lst cnt)
	(cond
		((= cnt 0) lst)
		(T (loadEdge 
			(let
				((v1 (read)) (v2 (read)))
				(cons (list v2 v1) (cons (list v1 v2) lst))
			)
			(- cnt 1)))
	)
)
(defun hasinlist (lst elem)
	(cond
		((null lst) Nil)
		((eq (first (first lst)) elem) T)
		(T (hasinlist (cdr lst) elem))
	)
)
(defun fillColor (vertex colorlist)
	(cond
		((null vertex) colorlist)
		(T (let ((elem (first vertex)))
			(cond
				((hasinlist colorlist elem)
					(fillColor (cdr vertex) colorlist))
				(T (fillColor (cdr vertex) (cons (list elem 0) colorlist)))
			)
			)
		)
	)
)
(defun alterlist (lst v c)
	(cond
		((null lst) Nil)
		((eq (first (first lst)) v) (cons (list v c) (cdr lst)))
		(T (cons (car lst) (alterlist (cdr lst) v c)))
	)
)
(defun setcolor (v c)
	(put 'G 'color (alterlist (get 'G 'color) v c))
)
(defun findlist (lst v)
	(cond
		((null lst) Nil)
		((eq (first (first lst)) v) (second (first lst)))
		(T (findlist (cdr lst) v))
	)
)
(defun getcolor (v)
	(findlist (get 'G 'color) v)
)
(defun findValList (lst val)
	(cond
		((null lst) Nil)
		((eq (second (first lst)) val) (first (first lst)))
		(T (findValList (cdr lst) val))
	)
)
(defun nullcolor ()
	(findValList (get 'G 'color) 0)
)
(defun loadVertex (cnt lst)
	(cond
		((= cnt 0) lst)
		(T (loadVertex (- cnt 1) (cons (read) lst)))
	)
)
(defun loadGraph ()
	(put 'G 'n (read))
	(put 'G 'vertex (loadVertex (get 'G 'n) Nil))
	; (print 'vertex)(print (get 'G 'vertex))
	(put 'G 'm (read))
	(put 'G 'edge (loadEdge Nil (get 'G 'm)))
	(put 'G 'color (fillColor (get 'G 'vertex) Nil))
	(put 'G 'error Nil)
	(put 'G 'answer Nil)
)
(defun processvertex (v parent cnt edge)
	(cond
		((null edge) Nil)
		(T (let ((from (first (first edge))) (to (second (first edge))))
			(cond
				((and (eq from v) (not (eq to parent)))
					; (print 'from)(print from)(print 'to)(print to)
					(cond
						((eq (getcolor to) 0) 
							(dfs to from cnt))
						(T (put 'G 'error 1))
					)
				)
			)
			(processvertex v parent cnt (cdr edge))
		))
	)
)
(defun dfs (v parent cnt)
	; (print cnt)
	; (print v)
	; (print 'end)
	(setcolor v -1)
	(apped 'G 'curlist v)
	(processvertex v parent cnt (get 'G 'edge))
	(setcolor v cnt)
)
(defun getforest (cnt)
	(put 'G 'curlist Nil)
	(let ((elem (nullcolor)))
		(cond
			((null elem) Nil)
			(T
				(dfs elem Nil cnt)
				(apped 'G 'answer (get 'G 'curlist))
				(getforest (+ 1 cnt))
			)
		)
	)
)
(defun run ()
	(loadGraph)
	(getforest 1)
	(cond
		((get 'G 'error) (print 'Not-a-forest))
		(T (print (get 'G 'answer)))
	)
)